{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifsGrid.js","hooks/useGetGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","placeholder","type","className","value","onChange","target","onClick","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","href","src","alt","GifsGrid","loading","state","setState","useEffect","then","setTimeout","useGetGifs","image","key","GifExpertApp","name","categories","divRoot","document","getElementById","ReactDOM","render"],"mappings":"uMA6CeA,EA1CK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAuBrC,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAY,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACpCN,EAAc,OAMd,2BACEO,YAAY,aACZC,KAAK,OACLC,UAAU,iBACVC,MAAOX,EACPY,SA1BoB,SAACT,GACzBF,EAAcE,EAAEU,OAAOF,UA0BrB,4BACED,UAAU,eACVI,QAzBoB,WACrBd,EAAWK,OAAOC,OAAS,IAC5BR,GAAY,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACpCN,EAAc,OAoBd,Y,uBClCOc,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACP,EACC,mCACTC,EAHe,iDAGiCC,UAAUH,GAH3C,kBACP,EADO,oBAEN,oCAFM,SAIHI,MAAMF,GAJH,cAIfG,EAJe,gBAKAA,EAAIC,OALJ,uBAKdC,EALc,EAKdA,KACDC,EAAOD,EAAKE,KAAI,YAEpB,MAAO,CAACC,GAFqC,EAAvBA,GAEVC,MAFiC,EAAnBA,MAEPT,IAF0B,EAAZU,OAC1BC,iBACqBX,QART,kBAUdM,GAVc,4CAAH,sDCGPM,EAAc,SAAC,GAAkB,IAAjBZ,EAAgB,EAAhBA,IAAKS,EAAW,EAAXA,MAChC,OACI,uBAAGI,KAAMb,EAAKL,OAAO,QACnBH,UAAU,0CACViB,MAAOA,GACP,2BAAIA,GACJ,yBAAKjB,UAAU,UAAUsB,IAAKd,EAAKe,IAAKN,MCJnCO,EAAW,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAAc,ECFd,SAACA,GAAc,IAAD,EAEZjB,mBAAU,CAClC6B,OAAQ,GACRO,SAAS,IAJ2B,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkBtC,OAXAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAAAX,GACrBY,YAAW,WACTH,EAAS,CACPT,SACAO,SAAS,MAEV,UAEJ,CAACnB,IAEGoB,EDdmBK,CAAWzB,GAA9BY,EAF+B,EAE/BA,OAAQO,EAFuB,EAEvBA,QAEf,OACE,yBAAKzB,UAAU,YACb,wBAAIA,UAAU,yCAAyCM,GACrDmB,GAAW,uBAAGzB,UAAU,4CAAb,eAEPkB,EAAOtB,QAAW6B,EAEpBP,EAAOH,KAAI,SAAAiB,GACT,OAAO,kBAAC,EAAD,eACGC,IAAKD,EAAMhB,IACPgB,OAJhB,uBAAGhC,UAAU,mDAAb,kCEcKkC,EAxBM,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAAU,EAEG9C,mBAAS,CAAC,iBAFb,mBAExB+C,EAFwB,KAEZhD,EAFY,KAI/B,OACE,kBAAC,WAAD,KACE,wBAAIY,UAAU,qCAAqCmC,GACnD,kBAAC,EAAD,CAAa/C,YAAaA,IAC1B,6BACA,4BACIgD,EAAWrB,KAAI,SAAAT,GAAQ,OACrB,kBAAC,EAAD,CACE2B,IAAK3B,EACLA,SAAUA,UCblB+B,G,MAAUC,SAASC,eAAe,SAExCC,IAASC,OAAQ,kBAAC,EAAD,CAAcN,KAAK,mBAAqBE,I","file":"static/js/main.53cebc28.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategory}) => {\r\n  \r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  const handleAddCategory = () => {\r\n    if(inputValue.trim().length > 1){\r\n      setCategory(cats => [inputValue, ...cats ]);\r\n      setInputValue('');\r\n    }\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(inputValue.trim().length > 1){\r\n      setCategory(cats => [inputValue, ...cats ]);\r\n      setInputValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input \r\n        placeholder=\"Buscar... \"\r\n        type=\"text\" \r\n        className=\"category-input\" \r\n        value={inputValue} \r\n        onChange={handleInputChange} />\r\n      <button \r\n        className=\"add-category\"\r\n        onClick={handleAddCategory}>Buscar</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategory: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","export const getGifs = async (category) => {\r\n  const limit = 4;\r\n  const apiKey = 'eU0RKJE15pCeTK4baaf03vzbKUMso0x3';\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${limit}&api_key=${apiKey}`;\r\n  const res = await fetch(url);\r\n  const {data} = await res.json();\r\n  const gifs = data.map(({id, title, images}) => {\r\n    const {downsized_medium: url} = images;\r\n    return {id, title, url: url.url};\r\n  });\r\n  return gifs;\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ({url, title}) => {\r\n  return (\r\n      <a href={url} target=\"blank\" \r\n        className=\"animate__animated animate__backInUp gif\"\r\n        title={title}>\r\n        <p>{title}</p>\r\n        <img className=\"gif-img\" src={url} alt={title} />\r\n      </a>\r\n  )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGridItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useGetGifs } from '../hooks/useGetGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifsGrid = ({category}) => {\r\n\r\n  const {images, loading} = useGetGifs(category);\r\n\r\n  return (\r\n    <div className=\"gif-item\">\r\n      <h4 className=\"animate__animated animate__backInDown\">{category}</h4>\r\n      {(loading && <p className=\"animate__animated animate__flash loading\">Buscando...</p>)}\r\n        {\r\n          (!images.length && !loading) ?\r\n          <p className=\"animate__animated animate__heartBeat no-results\">No se encontraron resultados</p> : \r\n          images.map(image => {\r\n            return <GifGridItem\r\n                      key={image.id} \r\n                      {...image} />\r\n          }) \r\n        }\r\n    </div>\r\n  )\r\n}\r\n\r\nGifsGrid.propTypes = {\r\n  category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifsGrid;\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useGetGifs = (category) => {\r\n\r\n  const [state, setState] = useState ({\r\n    images: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then(images => {\r\n      setTimeout(() => {\r\n        setState({\r\n          images,\r\n          loading: false\r\n        });\r\n      }, 1000);\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n}\r\n","import React, { Fragment, useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifsGrid } from './components/GifsGrid';\r\n\r\nconst GifExpertApp = ({name}) => {\r\n\r\n  const [categories, setCategory] = useState(['The Simpsons']);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2 className=\"animate__animated animate__fadeIn\">{name}</h2>\r\n      <AddCategory setCategory={setCategory} />\r\n      <hr />\r\n      <ul>\r\n        { categories.map(category => \r\n            <GifsGrid \r\n              key={category} \r\n              category={category} />\r\n          ) }\r\n      </ul>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nGifExpertApp.propTypes = {\r\n  name: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nconst divRoot = document.getElementById('root');\n\nReactDOM.render( <GifExpertApp name=\"Gif Expert App\" />, divRoot );\n"],"sourceRoot":""}